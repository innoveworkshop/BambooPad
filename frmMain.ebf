VERSION 5.00
Object = "{A32A88B3-817C-11D1-A762-00AA0044064C}#1.0#0"; "MSCEComDlg.dll"
Object = "{25C953A7-5464-11D1-A714-00AA0044064C}#1.0#0"; "MSCEFile.dll"
Object = "{BE67ABF5-0137-11D2-9B8A-00C04FAD5AEC}#1.0#0"; "mscecommandbar.dll"
Object = "{E491F001-98EC-11D1-9B3D-00C04FAD5AEC}#1.0#0"; "MSCEImageList.dll"
Begin VB.Form frmMain 
   BorderStyle     =   0  'None
   Caption         =   "BambooPad"
   ClientHeight    =   2490
   ClientLeft      =   0
   ClientTop       =   0
   ClientWidth     =   3375
   ScaleHeight     =   2490
   ScaleWidth      =   3375
   ShowInTaskbar   =   0   'False
   WindowState     =   2  'Maximized
   Begin CEImageListCtl.ImageList imgList 
      Left            =   2280
      Top             =   1920
      _cx             =   990
      _cy             =   990
      ImageWidth      =   0
      ImageHeight     =   0
   End
   Begin CEComDlgCtl.CommonDialog dlgFont 
      Left            =   840
      Top             =   1920
      _cx             =   847
      _cy             =   847
      CancelError     =   -1  'True
      Color           =   0
      DefaultExt      =   ""
      DialogTitle     =   "Select Font"
      FileName        =   ""
      Filter          =   ""
      FilterIndex     =   0
      Flags           =   0
      HelpCommand     =   0
      HelpContext     =   ""
      HelpFile        =   ""
      InitDir         =   ""
      MaxFileSize     =   256
      FontBold        =   0   'False
      FontItalic      =   0   'False
      FontName        =   ""
      FontSize        =   10
      FontUnderline   =   0   'False
      Max             =   0
      Min             =   0
      FontStrikethru  =   0   'False
   End
   Begin FILECTLCtl.File hndFile 
      Left            =   1560
      Top             =   1920
      _cx             =   1000
      _cy             =   1000
   End
   Begin CommandbarLib.CommandBar cbrMain 
      Height          =   345
      Left            =   0
      TabIndex        =   0
      Top             =   0
      Width           =   3015
      _cx             =   5318
      _cy             =   600
      Enabled         =   -1  'True
      OKButton        =   0   'False
      HelpButton      =   0   'False
      CloseButton     =   -1  'True
   End
   Begin CEComDlgCtl.CommonDialog dlgFile 
      Left            =   240
      Top             =   1920
      _cx             =   847
      _cy             =   847
      CancelError     =   -1  'True
      Color           =   0
      DefaultExt      =   "txt"
      DialogTitle     =   "Open/Save"
      FileName        =   ""
      Filter          =   "Plain Text (*.txt)|*.txt|All Files (*.*)|*.*"
      FilterIndex     =   0
      Flags           =   0
      HelpCommand     =   0
      HelpContext     =   ""
      HelpFile        =   ""
      InitDir         =   ""
      MaxFileSize     =   256
      FontBold        =   0   'False
      FontItalic      =   0   'False
      FontName        =   ""
      FontSize        =   10
      FontUnderline   =   0   'False
      Max             =   0
      Min             =   0
      FontStrikethru  =   0   'False
   End
   Begin VBCE.TextBox txtMain 
      Height          =   1095
      Left            =   480
      TabIndex        =   1
      Top             =   720
      Width           =   2175
      _cx             =   3836
      _cy             =   1931
      Appearance      =   1
      BackColor       =   -2147483643
      BorderStyle     =   1
      Enabled         =   -1  'True
      BeginProperty Font {0BE35203-8F91-11CE-9DE3-00AA004BB851} 
         Name            =   "Tahoma"
         Size            =   8.25
         Charset         =   0
         Weight          =   400
         Underline       =   0   'False
         Italic          =   0   'False
         Strikethrough   =   0   'False
      EndProperty
      ForeColor       =   -2147483640
      Text            =   "This is a simple text, something Simple something simple Something."
      Alignment       =   0
      HideSelection   =   -1  'True
      Locked          =   0   'False
      MaxLength       =   0
      MultiLine       =   -1  'True
      PasswordChar    =   ""
      ScrollBars      =   2
   End
End
Attribute VB_Name = "frmMain"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
' BambooPad
' A simple notepad replacement for Windows CE.
'
' Author: Nathan Campos <nathan@innoveworkshop.com>
Option Explicit

' General variables.
Public bTextDirty As Boolean
Public bLineEndingLF As Boolean
Public sCurrentFilename As String

'*
'* Control Management
'*

' Resizes all the controls together with the window.
Private Sub ResizeControls()
    ' Resize the command bar.
    cbrMain.Width = Me.Width
    
    ' Setup and resize the text box.
    txtMain.Top = cbrMain.Top + cbrMain.Height
    txtMain.Left = 0
    txtMain.Width = Me.Width
    txtMain.Height = Me.Height - cbrMain.Height
End Sub

' Initializes the image list.
Private Sub InitializeImageList()
    ' New, Open, and Save
    imgList.Add App.Path & "\NEW.BMP"
    imgList.Add App.Path & "\OPEN.BMP"
    imgList.Add App.Path & "\SAVE.BMP"
    
    ' Cut, Copy, and Paste
    imgList.Add App.Path & "\CUT.BMP"
    imgList.Add App.Path & "\COPY.BMP"
    imgList.Add App.Path & "\PASTE.BMP"
    
    ' Undo and Redo
    imgList.Add App.Path & "\UNDO.BMP"
    imgList.Add App.Path & "\REDO.BMP"
    
    ' Find and Font
    imgList.Add App.Path & "\FIND.BMP"
    imgList.Add App.Path & "\FONT.BMP"
End Sub

' Initializes the command bar and adds all of its controls.
Private Sub InitializeCommandBar()
    Dim mnuMain As CommandbarLib.CommandBarMenuBar
    Dim mnuFile As CommandbarLib.Item
    Dim mnuEdit As CommandbarLib.Item
    Dim mnuFind As CommandbarLib.Item
    Dim mnuFormat As CommandbarLib.Item
    Dim mnuHelp As CommandbarLib.Item
    Dim cmdButton As CommandBarButton
    
    ' Undo/Redo controls for undo stack module.
    Dim miUndo As CommandbarLib.Item
    Dim miRedo As CommandbarLib.Item
    Dim btUndo As CommandBarButton
    Dim btRedo As CommandBarButton
    
    ' Initialize the menu bar and associate a image list.
    cbrMain.ImageList = imgList.hImageList
    Set mnuMain = cbrMain.Controls.Add(cbrMenuBar, "MainMenu")
    
    ' Populate the File menu.
    Set mnuFile = mnuMain.Items.Add(1, "mnuFile", "&File")
    mnuFile.SubItems.Add , "New", "&New"
    mnuFile.SubItems.Add , "Open", "&Open..."
    mnuFile.SubItems.Add , "Save", "&Save"
    mnuFile.SubItems.Add , "SaveAs", "Save &As..."
    mnuFile.SubItems.Add , "", "", cbrMenuSeparator
    mnuFile.SubItems.Add , "Exit", "E&xit"
    
    ' Populate the Edit menu.
    Set mnuEdit = mnuMain.Items.Add(2, "mnuEdit", "&Edit")
    Set miUndo = mnuEdit.SubItems.Add(, "Undo", "&Undo")
    Set miRedo = mnuEdit.SubItems.Add(, "Redo", "&Redo")
    mnuEdit.SubItems.Add , "", "", cbrMenuSeparator
    mnuEdit.SubItems.Add , "Cut", "Cu&t"
    mnuEdit.SubItems.Add , "Copy", "&Copy"
    mnuEdit.SubItems.Add , "Paste", "&Paste"
    mnuEdit.SubItems.Add , "", "", cbrMenuSeparator
    mnuEdit.SubItems.Add , "SelectAll", "Select &All"
    
    ' Populate the Find menu.
    Set mnuFind = mnuMain.Items.Add(3, "mnuFind", "&Find")
    mnuFind.SubItems.Add , "Find", "F&ind..."
    mnuFind.SubItems.Add , "FindNext", "Find &Next"
    mnuFind.SubItems.Add , "Replace", "&Replace..."
    mnuFind.SubItems.Add , "", "", cbrMenuSeparator
    mnuFind.SubItems.Add , "GoTo", "&Go To..."
    
    ' Populate the Format menu.
    Set mnuFormat = mnuMain.Items.Add(4, "mnuFormat", "For&mat")
    mnuFormat.SubItems.Add , "Font", "&Font..."
    
    ' Populate the Help menu.
    Set mnuHelp = mnuMain.Items.Add(5, "mnuHelp", "&Help")
    mnuHelp.SubItems.Add , "About", "&About"
    
    ' Add New, Open, and Save buttons.
    Set cmdButton = cbrMain.Controls.Add(cbrButton)
    cmdButton.Style = cbrSeparator
    Set cmdButton = cbrMain.Controls.Add(cbrButton)
    cmdButton.Image = 0
    cmdButton.Key = "New"
    Set cmdButton = cbrMain.Controls.Add(cbrButton)
    cmdButton.Image = 1
    cmdButton.Key = "Open"
    Set cmdButton = cbrMain.Controls.Add(cbrButton)
    cmdButton.Image = 2
    cmdButton.Key = "Save"
    
    ' Add Cut, Copy, and Paste buttons.
    Set cmdButton = cbrMain.Controls.Add(cbrButton)
    cmdButton.Style = cbrSeparator
    Set cmdButton = cbrMain.Controls.Add(cbrButton)
    cmdButton.Image = 3
    cmdButton.Key = "Cut"
    Set cmdButton = cbrMain.Controls.Add(cbrButton)
    cmdButton.Image = 4
    cmdButton.Key = "Copy"
    Set cmdButton = cbrMain.Controls.Add(cbrButton)
    cmdButton.Image = 5
    cmdButton.Key = "Paste"
    
    ' Add Undo and Redo buttons.
    Set cmdButton = cbrMain.Controls.Add(cbrButton)
    cmdButton.Style = cbrSeparator
    Set btUndo = cbrMain.Controls.Add(cbrButton)
    btUndo.Image = 6
    btUndo.Key = "Undo"
    Set btRedo = cbrMain.Controls.Add(cbrButton)
    btRedo.Image = 7
    btRedo.Key = "Redo"
    
    ' Add Find and Font button.
    Set cmdButton = cbrMain.Controls.Add(cbrButton)
    cmdButton.Style = cbrSeparator
    Set cmdButton = cbrMain.Controls.Add(cbrButton)
    cmdButton.Image = 8
    cmdButton.Key = "Find"
    Set cmdButton = cbrMain.Controls.Add(cbrButton)
    cmdButton.Image = 9
    cmdButton.Key = "Font"
    
    ' Initialize undo stack.
    InitializeUndoStack btUndo, btRedo, miUndo, miRedo, txtMain, txtMain.Text
End Sub

'*
'* Auxiliary Methods
'*

' Checks if the text field can have its contents changed.
Public Function SaveIfTextDirty() As Boolean
    If bTextDirty Then
        Dim msgReturn As VbMsgBoxResult
        msgReturn = MsgBox("You have unsaved changes. Do you wish to save these changes?", vbYesNo + vbExclamation, "Unsaved Changes")
        
        If msgReturn = vbYes Then
            SaveIfTextDirty = False
            Exit Function
        End If
    End If
    
    SaveIfTextDirty = True
End Function

' Sets the text field content and resets the dirtiness flag.
Public Sub SetTextField(sContent As String)
    txtMain.Text = sContent
    bTextDirty = False
End Sub

'*
'* CommandBar/Button Action Handlers
'*

' Clears out the text field and prepares for a new file.
Public Sub NewFileCommand()
    ' Check if we can overwrite the text field.
    If SaveIfTextDirty Then
        SetTextField ""
    End If
End Sub

' Saves the text field content to a file.
Public Sub SaveFileCommand(bForceDialogShow As Boolean)
    Dim fFileFlags As FileOpenConstants
    
    ' Check if we should show the save dialog.
    If (sCurrentFilename = "") Or bForceDialogShow Then
        ' Setup and open a save dialog.
        fFileFlags = cdlOFNCreatePrompt + cdlOFNOverwritePrompt
        dlgFile.Flags = fFileFlags
        dlgFile.FileName = sCurrentFilename
        dlgFile.DialogTitle = "Save"
        On Error Resume Next
        dlgFile.ShowSave
        
        If Err = 0 Then
            sCurrentFilename = dlgFile.FileName
        End If
    End If
    
    ' Write text to file.
    WriteFileText hndFile, sCurrentFilename, txtMain.Text, bLineEndingLF
    bTextDirty = False
End Sub

' Opens a file using a dialog.
Public Sub OpenFileCommand()
    Dim sFileContents As String
    Dim fFileFlags As FileOpenConstants
    
    ' Check if we can overwrite the text field.
    If SaveIfTextDirty Then
        ' Setup and open a Open dialog.
        fFileFlags = cdlOFNFileMustExist
        dlgFile.Flags = fFileFlags
        dlgFile.FileName = sCurrentFilename
        dlgFile.DialogTitle = "Open"
        On Error Resume Next
        dlgFile.ShowOpen
        
        ' Get file contents if the dialog wasn't canceled.
        If Err = 0 Then
            sCurrentFilename = dlgFile.FileName
            ' TODO: Check the line ending of a file automatically.
            SetTextField GetFileText(hndFile, sCurrentFilename, bLineEndingLF)
            bTextDirty = False
            ClearUndoStack txtMain.Text
        End If
    End If
End Sub

' Copies text from the text field to the clipboard.
Public Sub CopyTextCommand(bRemoveCopiedText As Boolean)
    Clipboard.SetText txtMain.SelText
    
    If bRemoveCopiedText Then
        txtMain.SelText = ""
        PushTextToUndoStack txtMain.Text, txtMain.SelStart + txtMain.SelLength
    End If
End Sub

' Pastes text from the clipboard to the text field.
Public Sub PasteTextCommand()
    If Clipboard.GetFormat(vbCFText) Then
        txtMain.SelText = Clipboard.GetText
        PushTextToUndoStack txtMain.Text, txtMain.SelStart + txtMain.SelLength
    End If
End Sub

' Queries the user and goes to a defined line.
Public Sub GoToLineCommand()
    Dim sLineNumber As String
    Dim nCurPosition As Integer
    sLineNumber = InputBox("Please enter the line number", "Go To")
    
    ' Check if the used did input a valid number.
    If sLineNumber = "" Then
        Exit Sub
    ElseIf Not IsNumeric(sLineNumber) Then
        MsgBox sLineNumber & " is not a valid line number", vbOKOnly + vbExclamation, "Invalid Line Number"
        Exit Sub
    End If
    
    ' Search for the line character position.
    nCurPosition = GetLineCharPosition(txtMain.Text, Int(sLineNumber))
    If nCurPosition >= 0 Then
        txtMain.SelStart = nCurPosition
    Else
        MsgBox "Supplied number is bigger than the number of lines in the text", vbOKOnly + vbExclamation, "Invalid Line Number"
    End If
End Sub

Public Sub SelectFontCommand()
    ' Put the text field configuration into the dialog.
    dlgFont.FontBold = txtMain.FontBold
    dlgFont.FontItalic = txtMain.FontItalic
    dlgFont.FontName = txtMain.FontName
    dlgFont.FontSize = txtMain.FontSize
    dlgFont.FontStrikethru = txtMain.FontStrikethru
    dlgFont.FontUnderline = txtMain.FontUnderline
    dlgFont.Color = txtMain.ForeColor
    
    ' Select the font stuff and replace the text field configuration.
    On Error Resume Next
    dlgFont.ShowFont
    If Err = 0 Then
        txtMain.FontBold = dlgFont.FontBold
        txtMain.FontItalic = dlgFont.FontItalic
        txtMain.FontName = dlgFont.FontName
        txtMain.FontSize = dlgFont.FontSize
        txtMain.FontStrikethru = dlgFont.FontStrikethru
        txtMain.FontUnderline = dlgFont.FontUnderline
        txtMain.ForeColor = dlgFont.Color
    End If
End Sub

Public Sub HandleCommand(sKey As String)
    Select Case sKey
    Case "New"
        NewFileCommand
    Case "Open"
        OpenFileCommand
    Case "Save"
        SaveFileCommand False
    Case "SaveAs"
        SaveFileCommand True
    Case "Copy"
        CopyTextCommand False
    Case "Cut"
        CopyTextCommand True
    Case "Paste"
        PasteTextCommand
    Case "SelectAll"
        txtMain.SelStart = 0
        txtMain.SelLength = Len(txtMain.Text)
        txtMain.SetFocus
    Case "GoTo"
        GoToLineCommand
    Case "Font"
        SelectFontCommand
    Case "Undo"
        txtMain.Text = GetTextFromUndoStack
    Case "Redo"
        txtMain.Text = GetTextFromRedoStack
    Case "Find"
        frmFind.PrepareDialog Me
        frmFind.Show
        Exit Sub
    Case "FindNext"
        FindNext ""
    Case "About"
        frmAbout.CentralizeDialog Me
        frmAbout.Show
        Exit Sub
    Case "Exit"
        If SaveIfTextDirty Then
            App.End
        End If
    End Select
    
    txtMain.SetFocus
End Sub

'*
'* Event Handlers
'*

' Application was loaded.
Private Sub Form_Load()
    bLineEndingLF = False
    bTextDirty = False
    sCurrentFilename = ""
    
    ' Initialize and resize the controls.
    ResizeControls
    InitializeImageList
    InitializeCommandBar
    
    ' Initialize the find and replace module.
    InitializeFindReplace txtMain, False, frAny
    
    'PushTextToUndoStack ""
End Sub

' Window was resized.
Private Sub Form_Resize()
    ResizeControls
End Sub

' Event fired right before unloading the form and its contents.
Private Sub Form_Unload(Cancel As Integer)
    If Not SaveIfTextDirty Then
        SaveFileCommand True
    End If
End Sub

' Event fired when the text changes.
Private Sub txtMain_Change()
    bTextDirty = True
End Sub

' Handles button clicks in the command bar.
Private Sub cbrMain_ButtonClick(ByVal Button As CommandbarLib.CommandBarButton)
    HandleCommand Button.Key
End Sub

' Event fired when a menu item is clicked.
Private Sub cbrMain_MenuClick(ByVal Item As CommandbarLib.Item)
    HandleCommand Item.Key
End Sub

' Handles key presses in the main text field.
Private Sub txtMain_KeyPress(ByVal KeyAscii As Integer)
    ' Pushes text to the undo stack whenever space or enter is pressed.
    If (KeyAscii = 32) Or (KeyAscii = 13) Then
        PushTextToUndoStack txtMain.Text, txtMain.SelStart + txtMain.SelLength
    Else
        SetCurrentUndoStackItem txtMain.Text & Chr(KeyAscii), txtMain.SelStart + txtMain.SelLength
    End If
End Sub
